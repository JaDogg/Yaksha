# ==============================================================================================
# ╦  ┬┌─┐┌─┐┌┐┌┌─┐┌─┐    Yaksha Programming Language
# ║  ││  ├┤ │││└─┐├┤     is Licensed with GPLv3 + extra terms. Please see below.
# ╩═╝┴└─┘└─┘┘└┘└─┘└─┘
# Note: libs - MIT license, runtime/3rd - various
# ==============================================================================================
# GPLv3:
#
# Yaksha - Programming Language.
# Copyright (C) 2020 - 2024 Bhathiya Perera
#
# This program is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see https://www.gnu.org/licenses/.
#
# ==============================================================================================
# Additional Terms:
#
# Please note that any commercial use of the programming language's compiler source code
# (everything except compiler/runtime, compiler/libs and compiler/3rd) require a written agreement
# with author of the language (Bhathiya Perera).
#
# If you are using it for an open source project, please give credits.
# Your own project must use GPLv3 license with these additional terms.
#
# You may use programs written in Yaksha/YakshaLisp for any legal purpose
# (commercial, open-source, closed-source, etc) as long as it agrees
# to the licenses of linked runtime libraries (see compiler/runtime/README.md).
#
# ==============================================================================================
# Add support for building raylib projects

import libs.os
import libs.os.path
import libs.console
import libs.strings.array as sarr
import libs.thread.pool
import libs.os.cpu
import configuration as carp

class CObject:
    # .o object file created by compiling a single .c file
    c_file: str
    o_file: str
    base_name: str
    args: Array[str]

# TODO remove below class and add carp.Config to CObject it self
class BuildData:
    object_data: CObject
    config: carp.Config

def fill_arguments(src_path: str, c: CObject, dll: bool) -> CObject:
    # Fill args section of CObject
    args: Array[str]
    if dll:
        args = array("str", "-std=gnu99", "-DPLATFORM_DESKTOP", "-DGL_SILENCE_DEPRECATION=199309L", "-fno-sanitize=undefined", "-Oz")
    else:
        args = array("str", "-std=gnu99", "-DPLATFORM_DESKTOP", "-DGL_SILENCE_DEPRECATION=199309L", "-fno-sanitize=undefined", "-O1")

    # Creating a hot reload DLL with raylib
    if dll:
        arrput(args, "-DYK__CR_DLL")

    arrput(args, "-I" + src_path)
    external: str = path.join(src_path, "external")
    glfw: str = path.join(external, "glfw")
    arrput(args, "-I" + path.join(glfw, "include"))

    # Add mingw dependencies for windows
    if os.is_windows():
        arrput(args, "-I" + path.join(path.join(glfw, "deps"), "mingw"))

    if os.is_macos() and c.base_name == "rglfw":
        arrput(args, "-ObjC")

    # Enable link time optimization
    if not os.is_macos() and not dll:
        arrput(args, "-flto=full")


    arrput(args, c.c_file)
    arrput(args, "-o")
    arrput(args, c.o_file)

    c.args = args
    return c

def fill_web_arguments(src_path: str, c: CObject) -> CObject:
    # Fill args section of CObject
    args: Array[str] = array("str", "-std=gnu99", "-DPLATFORM_WEB", "-DGRAPHICS_API_OPENGL_ES2", "-Oz")

    arrput(args, c.c_file)
    arrput(args, "-o")
    arrput(args, c.o_file)

    c.args = args
    return c

def co(filename: str, src_path: str, target_path: str, web: bool, dll: bool) -> CObject:
    # Create a new CObject
    obj: CObject = CObject()
    obj.c_file = path.join(src_path, filename + ".c")
    # Prefix web objects so we do not use them together with .o files
    if web:
        obj.base_name = "web-" + filename
        obj.o_file = path.join(target_path, obj.base_name + ".o")
        obj = fill_web_arguments(src_path, obj)
    else:
        obj.base_name = "native-" + filename
        obj.o_file = path.join(target_path, filename + ".o")
        obj = fill_arguments(src_path, obj, dll)
    return obj

def del_c_object(c: CObject) -> None:
    # Delete a CObject
    del c.c_file
    del c.o_file
    del c.base_name
    sarr.del_str_array(c.args)
    del c

def del_objects(x: Array[CObject]) -> None:
    # Delete CObject object
    if len(x) == 0:
        del x
        return
    pos: int = 0
    length: int = len(x)
    while pos < length:
        del_c_object(x[pos])
        pos = pos + 1
    del x

def get_objects(raylib_src_path: str, gui_path: str, extra_path: str, build_path: str, web: bool, dll: bool) -> Array[CObject]:
    # Get a list of objects for raylib
    objects: Array[CObject]
    # rglfw object is not needed for web (provided by emsdk)
    if not web:
        arrput(objects, co("rglfw", raylib_src_path, build_path, web, dll))
    arrput(objects, co("raudio", raylib_src_path, build_path, web, dll))
    arrput(objects, co("rcore", raylib_src_path, build_path, web, dll))
    arrput(objects, co("rmodels", raylib_src_path, build_path, web, dll))
    arrput(objects, co("rshapes", raylib_src_path, build_path, web, dll))
    arrput(objects, co("rtext", raylib_src_path, build_path, web, dll))
    arrput(objects, co("rtextures", raylib_src_path, build_path, web, dll))
    arrput(objects, co("utils", raylib_src_path, build_path, web, dll))
    extra: CObject = co("rayextras", extra_path, build_path, web, dll)
    arrput(extra.args, "-I" + raylib_src_path)
    arrput(extra.args, "-I" + gui_path)
    arrput(objects, extra)
    return objects

def get_external_libs() -> Array[str]:
    # Get external libraries for native target (current platform)
    external_libs: Array[str]
    if os.is_windows():
        external_libs = array("str", "-lwinmm", "-lgdi32", "-lopengl32")
    elif os.is_macos():
        external_libs =  array("str", "-framework", "Foundation", "-framework", "CoreServices", "-framework", "CoreGraphics", "-framework", "AppKit", "-framework", "IOKit")
    else:
        # linux
        external_libs = array("str", "-lGL", "-lrt", "-ldl", "-lm", "-lX11")
    return external_libs

def get_web_args() -> Array[str]:
    web_args: Array[str] = array("str", "-s", "USE_GLFW=3", "-s", "ASYNCIFY", "-DPLATFORM_WEB")
    return web_args

def produce_object(c: CObject, conf: carp.Config, print_info: bool) -> bool:
    # Creates a new .o file for a raylib source
    # If raylib object already exists do not bother building it again
    # 1) We are only supporting native at the moment
    # 2) It takes too long to compile it again (zig might cache it though)
    if print_info:
        console.cyan("raylib::")
        console.yellow(c.base_name)
        console.cyan(" := ")
    if path.readable(c.o_file):
        if print_info:
            console.green("ok.\n")
        return True

    cmd: Array[str]
    if conf.compilation.web:
        cmd = array("str", conf.emcc_compiler_path, "-c", "-Oz")
    else:
        cmd = array("str", conf.zig_compiler_path, "cc", "-c", "-Oz")
    cmd = sarr.extend(cmd, c.args)
    defer sarr.del_str_array(cmd)
    pr: os.ProcessResult = os.run(cmd)
    defer os.del_process_result(pr)

    if pr.ok:
        if print_info:
            console.green("ok.\n")
        return True
    if print_info:
        console.red("failed.\n")
        console.cyan("--c compiler output---\n")
        console.red("command := ")
        console.cyan(sarr.join(cmd, " ") + "\n")
        console.red(pr.output)
        console.cyan("--end c compiler output---\n")
    return False

def build_object(arg: AnyPtr) -> None:
    data: BuildData = cast("BuildData", arg)
    produce_object(data.object_data, data.config, False)

def build_objects_sequential(objects: Array[CObject], conf: carp.Config) -> None:
    object_count: int = len(objects)
    pos: int = 0
    while pos < object_count:
        object: CObject = objects[pos]
        produce_object(object, conf, True)
        pos += 1

def build_objects(objects: Array[CObject], conf: carp.Config) -> None:
    println("building raylib ...")
    if conf.compilation.disable_parallel_build:
        build_objects_sequential(objects, conf)
        return
    # Attempt to build parallel
    object_count: int = len(objects)
    cpu_data: cpu.Cpu = cpu.info()
    threads: u8 = cast("u8", cpu_data.n_processors)
    threads = iif(threads > pool.MAX_THREAD_SIZE, pool.MAX_THREAD_SIZE, threads)
    tpool: pool.ThreadPool = pool.create(threads, cast("u32", object_count + 2))
    if tpool == None:
        build_objects_sequential(objects, conf)
        return
    to_pass: Array[BuildData]
    pos: int = 0
    while pos < object_count:
        object: CObject = objects[pos]
        data: BuildData = BuildData()
        data.object_data = object
        data.config = conf
        arrput(to_pass, data)
        # TODO check if we added it properly
        pool.add(tpool, build_object, cast("AnyPtr", data))
        pos += 1
    # TODO check destroy
    pool.destroy(tpool, True)
    pos = 0
    while pos < object_count:
        del to_pass[pos]
        pos += 1
    del to_pass

def get_raylib_args(conf: carp.Config, build_path: str) -> Array[str]:
    # Build raylib objects
    # Return list of objects & libraries that we want to link
    arguments: Array[str]
    runtime_path: str = conf.runtime_path
    path.mkdir(build_path)
    raylib_path: str = path.join(path.join(runtime_path, "raylib"), "src")
    raygui_path: str = path.join(path.join(runtime_path, "raygui"), "src")
    rayextra_path: str = path.join(runtime_path, "raylib_additional")
    objects: Array[CObject] = get_objects(raylib_path, raygui_path, rayextra_path, build_path, conf.compilation.web, conf.compilation.raylib_hot_reloading_dll)
    o_files: Array[str]
    defer sarr.del_str_array(o_files)
    defer del_objects(objects)

    object_count: int = len(objects)

    # Get .o files to o_files
    build_objects(objects, conf)
    pos: int = 0
    while pos < object_count:
        object: CObject = objects[pos]
        arrput(o_files, object.o_file)
        pos += 1

    if conf.compilation.web:
        # Add web build arguments
        arguments = get_web_args()
        arguments = sarr.extend(arguments, o_files)
    else:
        # Link external libs + objects
        arguments = get_external_libs()
        arguments = sarr.extend(arguments, o_files)
        # On windows try and build a gui application so it will not annoy us
        if os.is_windows():
            # arrput(arguments, "-Wl,--subsystem,windows")
            # unfortunately above does not work, so we have to hide the console manually
            arrput(arguments, "-DYK__WINDOWS_HIDE_CONSOLE")

    # Add includes
    arrput(arguments, "-I" + raylib_path)
    arrput(arguments, "-I" + raygui_path)
    arrput(arguments, "-I" + rayextra_path)
    return arguments
