# ==============================================================================================
# ╦  ┬┌─┐┌─┐┌┐┌┌─┐┌─┐    Yaksha Programming Language
# ║  ││  ├┤ │││└─┐├┤     is Licensed with GPLv3 + exta terms. Please see below.
# ╩═╝┴└─┘└─┘┘└┘└─┘└─┘
# Note: libs - MIT license, runtime/3rd - various
# ==============================================================================================
# GPLv3:
# 
# Yaksha - Programming Language.
# Copyright (C) 2020 - 2023 Bhathiya Perera
# 
# This program is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with this program.
# If not, see https://www.gnu.org/licenses/.
# 
# ==============================================================================================
# Additional Terms:
# 
# Please note that any commercial use of the programming language's compiler source code
# (everything except compiler/runtime, compiler/libs and compiler/3rd) require a written agreement
# with author of the language (Bhathiya Perera).
# 
# If you are using it for an open source project, please give credits.
# Your own project must use GPLv3 license with these additional terms.
# 
# You may use programs written in Yaksha/YakshaLisp for any legal purpose
# (commercial, open-source, closed-source, etc) as long as it agrees
# to the licenses of linked runtime libraries (see compiler/runtime/README.md).
# 
# ==============================================================================================
import libs
import libs.os
import libs.os.path
import libs.fileformats.toml
import libs.io
import libs.c
import libs.console
import libs.strings
import libs.strings.array as sarr
import libs.argparse
import configuration as carp
import building

def print_banner() -> None:
    # This just print a banner
    art: str = """
    ╔═╗┌─┐┬─┐╔═╗┌┐┌┌┬┐┬─┐
    ║  ├─┤├┬┘╠═╝│││ │ ├┬┘
    ╚═╝┴ ┴┴└─╩  ┘└┘ ┴ ┴└─
    """
    text: str = """
    Tool for building Yaksha
    Projects
    """
    art2: str = """
       ,
      /(  ___________
     |  >:===========`
      )(
      \"\"\n"""
    # ASCII art for hammer from https://ascii.co.uk/art/hammer -> author jgs
    console.green(art)
    console.cyan(text)
    console.yellow(art2)

def print_errors(er: Array[str]) -> None:
    # Print given error strings in red
    length: int = len(er)
    x: int = 0
    while x < length:
        console.red(er[x] + "\n")
        x = x + 1

def printkv(k: str, v: str) -> None:
    # Print key value to console in cyan, red and green
    # <not found> is printed if value is empty
    console.cyan(k)
    console.red(" := ")
    if len(v) == 0:
        console.green("<not found>")
    else:
        console.green(v)
    print("\n")

def print_config(config: carp.Config) -> None:
    # Print configuration information
    # This prints things such as libs path, runtime, zig.exe, etc
    printkv("libs", config.libs_path)
    printkv("runtime", config.runtime_path)
    printkv("compiler", config.compiler_path)
    printkv("zig compiler", config.zig_compiler_path)
    printkv("emcc compiler", config.emcc_compiler_path)
    printkv("emrun", config.emrun_path)
    printkv("w4", config.w4_path)
    printkv("standard library version", libs.version())

def build_from_config(config: carp.Config, simple: bool, silent: bool) -> int:
    # Build given config, if simple building.build_simple() is called
    return_val: int = 0
    yk_args: Array[str] = array("str", config.compiler_path, "compile", config.project.main, config.libs_path)
    result: os.ProcessResult = os.run(yk_args)

    defer sarr.del_str_array(yk_args)
    defer os.del_process_result(result)

    if not result.ok:
        console.cyan("---- running Yaksha compiler ---\n")
        console.red("Failed to execute: ")
        console.yellow(sarr.join(yk_args, " "))
        print("\n")
        console.red(result.output)
        print("\n")
        return_val = -1
        console.cyan("---- end of compiler run ---\n")
    else:
        if strings.startswith(result.output, "// YK"):
            if simple:
                return_val = building.build_simple(config, result.output, silent)
            else:
                return_val = building.build(config, result.output)
        else:
            console.cyan("---- running Yaksha compiler ---\n")
            console.red(result.output)
            print("\n")
            return_val = -1
            console.cyan("---- end of compiler run ---\n")

    return return_val

def perform_build() -> int:
    # Perform a build of a project
    config: carp.Config = carp.load_config()
    defer carp.del_config(config)
    if len(config.errors) > 0:
        print_errors(config.errors)
        return -1
    print_config(config)
    ret: int = build_from_config(config, False, False)
    return ret

def perform_mini_build(filename: str, use_raylib: bool, use_web: bool, wasm4: bool, web_shell: str, asset_path: str, silent: bool, actually_run: bool, crdll: bool, no_parallel: bool) -> int:
    # Perform single file project build and execute binary
    name: str = path.remove_extension(path.basename(filename))
    config: carp.Config = carp.create_adhoc_config(name, filename, use_raylib, use_web, wasm4, web_shell, asset_path, crdll, no_parallel)
    defer carp.del_config(config)
    if len(config.errors) > 0:
        print_errors(config.errors)
        return -1
    if not silent:
        print_config(config)
    ret: int = build_from_config(config, True, silent)
    if ret != 0:
        return ret
    if not actually_run:
        return 0
    # Try to run binary now
    if not silent:
        console.cyan("-----------------------------")
        print("\n")
    binary: str = name
    if use_web:
        binary = binary + ".html"
        em_args: Array[str] = array("str", config.emrun_path, path.join(os.cwd(), binary))
        r: os.ProcessResult = os.run(em_args)
        sarr.del_str_array(em_args)
        os.del_process_result(r)
    elif wasm4:
        binary = binary + ".wasm"
        em_args: Array[str] = array("str", config.w4_path, "run-native", path.join(os.cwd(), binary))
        r: os.ProcessResult = os.run(em_args)
        sarr.del_str_array(em_args)
        os.del_process_result(r)
    else:
        if os.is_windows():
            binary = binary + ".exe"
        else:
            binary = "./" + binary
        binary_cstr: c.CStr = strings.to_cstr(binary)
        c.system(binary_cstr)
        strings.del_str(binary_cstr)
    return 0


def handle_args(args: os.Arguments) -> int:
    # Multiple arguments trigger how to run the program
    arguments: Array[str] = sarr.dup(args.argv)
    defer sarr.del_str_array(arguments)
    options: Array[argparse.Option]
    defer del options
    usages: Array[str] = array("str", "carpntr", "carpntr [options] file")
    defer sarr.del_str_array(usages)

    help: int = 0
    run: int = 0
    just_compile: int = 0
    raylib: int = 0
    crdll: int = 0
    web: int = 0
    wasm4: int = 0
    silent_mode: int = 0
    no_parallel: int = 0
    file_path: c.CStr = strings.null_cstr()
    assets_path: c.CStr = strings.null_cstr()
    web_shell: str = ""
    assets_path_s: str = ""
    arrput(options, argparse.opt_boolean("h", "help", getref(help), "show help and exit"))
    arrput(options, argparse.opt_boolean("R", "run", getref(run), "run a single file"))
    arrput(options, argparse.opt_boolean("C", "compile", getref(just_compile), "compile a single file"))
    arrput(options, argparse.opt_boolean("r", "raylib", getref(raylib), "enable raylib"))
    arrput(options, argparse.opt_boolean("w", "web", getref(web), "build for web (works only with raylib)"))
    arrput(options, argparse.opt_boolean("d", "dll", getref(crdll), "enable .dll client build for hot reloading with ykreload/cr.h (works only with raylib)"))
    arrput(options, argparse.opt_string("s", "shell", getref(file_path), "specify shell file for web builds"))
    arrput(options, argparse.opt_string("a", "assets", getref(assets_path), "specify assets directory for web builds"))
    arrput(options, argparse.opt_boolean("4", "wasm4", getref(wasm4), "wasm4 build"))
    arrput(options, argparse.opt_boolean("S", "silent", getref(silent_mode), "do not print anything except errors"))
    arrput(options, argparse.opt_boolean("N", "nothread", getref(no_parallel), "no parallel builds (for debugging)"))
    arrput(options, argparse.opt_end())

    a: argparse.ArgParseWrapper = argparse.new(options, usages)
    defer argparse.del_argparse(a)

    remainder: argparse.ArgParseRemainder = argparse.parse(a.state, arguments)
    defer argparse.del_remainder(remainder)
    defer strings.del_cstr(file_path)

    if silent_mode != 1:
        print_banner()

    if help == 1:
        argparse.usage(a.state)
        return 0

    if remainder.argc != 1:
        println("One file must be preset for excution")
        return 1
    single_file: str = remainder.remainder[0]

    if wasm4 == 1 and (raylib == 1 or web == 1):
        println("Wasm4 is not compatible with raylib/web")
        return 1
    if web == 1 and raylib != 1:
        println("Web is only supported with raylib")
        return 1
    if web != 1 and strings.valid_cstr(file_path):
        println("Shell is only supported with web")
        return 1
    if web != 1 and strings.valid_cstr(file_path):
        println("Shell is only supported with web")
        return 1
    if run == 1 and crdll == 1:
        println("Use -C instead of -R to compile a dll.")
        return 1
    if run == 1 or just_compile == 1:
        if strings.valid_cstr(file_path):
            web_shell = strings.from_cstr(file_path)
            print("Using web-shell:")
            println(web_shell)
        if strings.valid_cstr(assets_path):
            assets_path_s = strings.from_cstr(assets_path)
            print("Using asset-path:")
            println(assets_path_s)
        return perform_mini_build(single_file, raylib == 1, web == 1, wasm4 == 1, web_shell, assets_path_s, silent_mode == 1, run == 1, crdll == 1, no_parallel == 1)
    console.red("Invalid usage. Please use '-R' option if you want to run a program. Try 'carpntr --help' for more information.\n")
    return 0

def main() -> int:
    args: os.Arguments = os.get_args()
    # No arguments -> default
    if args.argc <= 1:
        print_banner()
        return perform_build()
    return handle_args(args)
