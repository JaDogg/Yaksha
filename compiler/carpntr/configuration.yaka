# ==============================================================================================
# ╦  ┬┌─┐┌─┐┌┐┌┌─┐┌─┐    Yaksha Programming Language
# ║  ││  ├┤ │││└─┐├┤     is Licensed with GPLv3 + extra terms. Please see below.
# ╩═╝┴└─┘└─┘┘└┘└─┘└─┘
# Note: libs - MIT license, runtime/3rd - various
# ==============================================================================================
# GPLv3:
# 
# Yaksha - Programming Language.
# Copyright (C) 2020 - 2024 Bhathiya Perera
# 
# This program is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with this program.
# If not, see https://www.gnu.org/licenses/.
# 
# ==============================================================================================
# Additional Terms:
# 
# Please note that any commercial use of the programming language's compiler source code
# (everything except compiler/runtime, compiler/libs and compiler/3rd) require a written agreement
# with author of the language (Bhathiya Perera).
# 
# If you are using it for an open source project, please give credits.
# Your own project must use GPLv3 license with these additional terms.
# 
# You may use programs written in Yaksha/YakshaLisp for any legal purpose
# (commercial, open-source, closed-source, etc) as long as it agrees
# to the licenses of linked runtime libraries (see compiler/runtime/README.md).
# 
# ==============================================================================================
import libs.strings.array as sarr
import libs.strings
import libs.fileformats.toml
import libs.os
import libs.os.path
import libs.io
import libs.console

CLANG: Const[int] = 44
GCC: Const[int] = 33
NOT_FOUND: Const[int] = 0

class CCode:
    # CCode section of yaksha.toml
    # defines - Injected defines for the generated c code
    # compiler_defines - /D or -D arguments
    # includes - Injected #include "x.h"
    # system_includes - Injected #include <x.h>
    include_paths: Array[str]
    defines: Array[str]
    compiler_defines: Array[str]
    includes: Array[str]
    system_includes: Array[str]
    c_code: Array[str]
    cpp_code: Array[str]
    runtime_feature_defines: Array[str]
    runtime_feature_includes: Array[str]
    runtime_feature_c_code: Array[str]
    runtime_feature_compiler_defines: Array[str]


class Project:
    # Project section in yaksha.toml
    main: str
    name: str
    author: str


class Compilation:
    # Compilation section of yaksha.toml
    override_alloc: bool
    only_ccode: bool
    libc: str
    compiler: str
    targets: Array[str]
    raylib: bool
    raylib_hot_reloading_dll: bool
    web: bool
    web_shell: str
    web_assets: str
    wasm4: bool
    disable_parallel_build: bool


class Config:
    # Full yaksha.toml object
    runtime_path: str
    compiler_path: str
    libs_path: str
    zig_compiler_path: str
    emcc_compiler_path: str
    gcc_compiler_path: str
    clang_compiler_path: str
    alt_compiler: int
    use_alt_compiler: bool
    emrun_path: str
    w4_path: str
    c_code: CCode
    project: Project
    compilation: Compilation
    errors: Array[str]


def find_runtime_path(c: Config) -> None:
    # Find runtime library path (.c and .h files, raylib source, etc)
    exe_parent: str = os.exe_path()
    l1: str = path.join(path.dirname(exe_parent), "runtime")
    l2: str = path.join(path.dirname(path.dirname(exe_parent)), "runtime")
    l3: str = path.join(exe_parent, "runtime")
    if path.readable(path.join(l1, "yk__lib.h")):
        c.runtime_path = l1
        return
    if path.readable(path.join(l2, "yk__lib.h")):
        c.runtime_path = l2
        return
    if path.readable(path.join(l3, "yk__lib.h")):
        c.runtime_path = l3
        return
    arrput(c.errors, "Failed to find runtime library in :" + l1)
    arrput(c.errors, "Failed to find runtime library in :" + l2)
    arrput(c.errors, "Failed to find runtime library in :" + l3)
    c.runtime_path = "<not found>"

def find_libs_path(c: Config) -> None:
    # Find standard library path (libs, raylib wrapper)
    exe_parent: str = os.exe_path()
    l1: str = path.join(path.dirname(exe_parent), "libs")
    l2: str = path.join(path.dirname(path.dirname(exe_parent)), "libs")
    l3: str = path.join(exe_parent, "libs")
    if path.readable(path.join(l1, "libs.yaka")):
        c.libs_path = l1
        return
    if path.readable(path.join(l2, "libs.yaka")):
        c.libs_path = l2
        return
    if path.readable(path.join(l3, "libs.yaka")):
        c.libs_path = l3
        return
    arrput(c.errors, "Failed to find std library in :" + l1)
    arrput(c.errors, "Failed to find std library in :" + l2)
    arrput(c.errors, "Failed to find std library in :" + l3)
    c.libs_path = "<not found>"

def find_yaksha_compiler(c: Config) -> None:
    # Find yakshac(.exe) binary file
    exe_parent: str = os.exe_path()
    l1: str = path.join(exe_parent, "yaksha")
    if os.is_windows():
        l1 = l1 + ".exe"
    l2: str = path.join(path.dirname(path.dirname(exe_parent)), "bin")
    l2 = path.join(l2, "yaksha")
    if os.is_windows():
        l2 = l2 + ".exe"
    if path.executable(l1):
        c.compiler_path = l1
        return
    if path.executable(l2):
        c.compiler_path = l2
        return
    fallback: str = os.which("yaksha")
    if len(fallback) > 0:
        c.compiler_path = fallback
        return
    arrput(c.errors, "Failed to find yaksha in :" + l1)
    arrput(c.errors, "Failed to find yaksha in :" + l2)
    arrput(c.errors, "Failed to find yaksha in PATH")
    c.compiler_path = "<not found>"

def find_zig_compiler(c: Config) -> None:
    # Find zig(.exe) binary file
    zig: str = os.which("zig")
    if len(zig) > 0:
        c.zig_compiler_path = zig
        return
    # -------------------------------------
    # WASM4 compilation require zig
    if c.compilation.wasm4:
        arrput(c.errors, "Failed to find zig in PATH")
        c.zig_compiler_path = "<not found>"
        return
    # -------------------------------------
    # Let's attempt to use gcc or clang as a fallback
    gcc: str = os.which("gcc")
    clang: str = os.which("clang")
    found_altenative = len(gcc) > 0 or len(clang) > 0
    c.alt_compiler = NOT_FOUND
    # -------------------------------------
    if len(gcc) > 0:
        c.gcc_compiler_path = gcc
        c.alt_compiler = GCC
    else:
        c.gcc_compiler_path = "<not found>"
    # -------------------------------------
    if len(clang) > 0:
        c.clang_compiler_path = clang
        c.alt_compiler = CLANG
    else:
        c.clang_compiler_path = "<not found>"
    # -------------------------------------
    # Not finding zig is a problem if we are not building for web
    if not c.compilation.web and not found_altenative:
        arrput(c.errors, "Failed to find zig/clang/gcc in PATH")
    c.zig_compiler_path = "<not found>"
    c.use_alt_compiler = found_altenative

def find_emsdk(c: Config) -> None:
    # Find emcc/emrun(.exe) binary file
    emcc: str = os.which("emcc")
    emrun: str = os.which("emrun")
    # we did not find emcc or emrun?
    not_found: bool = len(emcc) == 0 or len(emrun) == 0
    # if we need emsdk?
    if c.compilation.web and not_found:
        arrput(c.errors, "Failed to find emsdk (emcc, emrun) in PATH")
        c.emcc_compiler_path = "<not found>"
        c.emrun_path = "<not found>"
    else:
        c.emcc_compiler_path = emcc
        c.emrun_path = emrun

def find_w4(c: Config) -> None:
    # Find w4(.exe) binary file
    w4: str = os.which("w4")
    # we did not w4
    not_found: bool = len(w4) == 0
    # if we need emsdk?
    if c.compilation.wasm4 and not_found:
        arrput(c.errors, "Failed to find w4 in PATH")
        c.w4_path = "<not found>"
    else:
        c.w4_path = w4

def load_project(conf: toml.Table, c: Config) -> Project:
    # Load [project] section from yaksha.toml
    p: Project = Project()
    project: toml.Table = toml.get_table(conf, "project")
    if not toml.valid_table(project):
        arrput(c.errors, "Failed to read '[project]'")
        return p

    main_code_file: str = toml.get_string(project, "main")
    project_name: str = toml.get_string(project, "name")
    project_author: str = toml.get_string(project, "author")
    if main_code_file == "":
        arrput(c.errors, "Invalid '[project].main'")
    if project_name == "":
        arrput(c.errors, "Invalid '[project].name'")
    if project_author == "":
        arrput(c.errors, "Invalid '[project].author'")

    p.main = main_code_file
    p.author = project_author
    p.name = project_name

    return p

def load_c_code(conf: toml.Table, c: Config) -> CCode:
    # Load [ccode] section from yaksha.toml
    cc: CCode = CCode()
    cc_data: toml.Table = toml.get_table(conf, "ccode")
    if not toml.valid_table(cc_data):
        # This is optional so ignore this
        return cc
    cc.include_paths = toml.get_string_array(cc_data, "include_paths")
    cc.defines = toml.get_string_array(cc_data, "defines")
    cc.compiler_defines = toml.get_string_array(cc_data, "compiler_defines")
    cc.includes = toml.get_string_array(cc_data, "includes")
    cc.system_includes = toml.get_string_array(cc_data, "system_includes")
    cc.c_code = toml.get_string_array(cc_data, "c_code")
    cc.cpp_code = toml.get_string_array(cc_data, "cpp_code")
    return cc

def load_compilation(conf: toml.Table, c: Config) -> Compilation:
    # Load [compilation] section from yaksha.toml
    co: Compilation = Compilation()
    co_data: toml.Table = toml.get_table(conf, "compilation")
    if not toml.valid_table(co_data):
        # This is optional so ignore this
        return co
    co.targets = toml.get_string_array(co_data, "targets")
    co.raylib = toml.get_bool_default(co_data, "raylib", False)
    co.raylib_hot_reloading_dll = toml.get_bool_default(co_data, "raylib_hot_reloading_dll", False)
    co.disable_parallel_build = toml.get_bool_default(co_data, "disable_parallel_build", False)
    co.web = toml.get_bool_default(co_data, "web", False)
    co.wasm4 = toml.get_bool_default(co_data, "wasm4", False)
    co.web_shell = toml.get_string(co_data, "web_shell")
    co.web_assets = toml.get_string(co_data, "web_assets")
    return co

def inject_c_code_defaults(cc: CCode, c: Config) -> CCode:
    # Add runtime and other defaults to the CCode section
    current_dir: str = path.dirname(os.cwd())

    # Add defaults to cc.include_paths
    df_include_paths: Array[str] = array("str", c.runtime_path, path.join(current_dir, "build"))
    orig_include_paths: Array[str] = cc.include_paths
    defer sarr.del_str_array(orig_include_paths)
    cc.include_paths = sarr.extend(df_include_paths, cc.include_paths)

    cc.runtime_feature_includes = array("str", "yk__system.h")
    cc.runtime_feature_c_code = array("str", path.join(c.runtime_path, "yk__system.c"))

    return cc

def load_runtime_features(c: Config, code: str, silent: bool) -> Config:
    header: str = "// YK:"
    has_requirements: bool = strings.startswith(code, header)
    if not has_requirements:
        if not silent:
            console.cyan("runtime_features")
            console.red(" := ")
            console.green("none!")
            print("\n")
        return c
    # Find #
    until: int = strings.find_char(code, strings.ord("#"))
    if until == -1:
        # This must not happen
        arrput(c.errors, "Failed to extract runtime features. Cannot find # in compiled code first line.")
        return c
    temp_features: str = strings.mid(code, len(header), until - len(header))
    if not silent:
        console.cyan("runtime_features")
        console.red(" := ")
        console.green(temp_features)
        print("\n")
    features: Array[str] = strings.split(temp_features, ",")
    defer sarr.del_str_array(features)
    x: int = 0
    length: int = len(features)
    while x < length:
        feature: str = features[x]
        x = x + 1
        if feature == "wasm4":
            arrput(c.c_code.runtime_feature_includes, "wasm4.h")
            arrput(c.c_code.runtime_feature_includes, "yk__wasm4_libc.h")
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__wasm4_libc.c"))
            # Get rid of main() method
            arrput(c.c_code.runtime_feature_compiler_defines, "YK__WASM4")
            # Check that we are actually using wasm4
            if not c.compilation.wasm4:
                arrput(c.errors, "wasm4 feature used without configuring it")
            continue
        if feature == "argparse":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__argparse.c"))
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "argparse.c"))
            arrput(c.c_code.runtime_feature_includes, "yk__argparse.h")
            arrput(c.c_code.runtime_feature_includes, "argparse.h")
            continue
        if feature == "arrayutils":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__arrayutils.c"))
            arrput(c.c_code.runtime_feature_includes, "yk__arrayutils.h")
            continue
        if feature == "console":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__console.c"))
            arrput(c.c_code.runtime_feature_includes, "yk__console.h")
            continue
        if feature == "graphicutils":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__graphic_utils.c"))
            arrput(c.c_code.runtime_feature_includes, "yk__graphic_utils.h")
            continue
        if feature == "ini":
            arrput(c.c_code.runtime_feature_defines, "INI_IMPLEMENTATION")
            arrput(c.c_code.runtime_feature_includes, "ini.h")
            continue
        if feature == "process":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__process.c"))
            arrput(c.c_code.runtime_feature_includes, "yk__process.h")
            continue
        if feature == "cpu":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__cpu.c"))
            arrput(c.c_code.runtime_feature_includes, "yk__cpu.h")
            continue
        if feature == "raylib":
            # Verify raylib is enabled
            if not c.compilation.raylib:
                arrput(c.errors, "raylib feature used without configuring it")
            continue
        if feature == "tinycthread":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "tinycthread.c"))
            arrput(c.c_code.runtime_feature_includes, "tinycthread.h")
            continue
        if feature == "toml":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "toml.c"))
            arrput(c.c_code.runtime_feature_includes, "toml.h")
            continue
        if feature == "utf8proc":
            arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "utf8proc.c"))
            arrput(c.c_code.runtime_feature_compiler_defines, "UTF8PROC_STATIC")
            arrput(c.c_code.runtime_feature_includes, "utf8proc.h")
            arrput(c.c_code.runtime_feature_includes, "yk__utf8iter.h")
            continue
        if feature == "whereami":
            if c.compilation.web:
                arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "yk__fake_whereami.c"))
            else:
                arrput(c.c_code.runtime_feature_c_code, path.join(c.runtime_path, "whereami.c"))
            arrput(c.c_code.runtime_feature_includes, "whereami.h")
            continue
        # Invalid feature
        arrput(c.errors, "Invalid runtime feature: " + feature)
        break
    return c

def load_config() -> Config:
    # Load completed config with injected defaults
    c: Config = Config()
    configf: str = path.join(os.cwd(), "yaksha.toml")

    config_text: str = io.readfile(configf)
    conf: toml.Table = toml.from_str(config_text)
    if not toml.valid_table(conf):
        arrput(c.errors, "Failed to read config file")
        return c
    defer toml.del_table(conf)
    c.compilation = load_compilation(conf, c)
    # Try and find yakshac.exe
    find_yaksha_compiler(c)
    if len(c.errors) > 0:
        return c
    # Try and find zig.exe
    find_zig_compiler(c)
    if len(c.errors) > 0:
        return c
    # Try to find emsdk
    find_emsdk(c)
    if len(c.errors) > 0:
        return c
    # Try to find w4
    find_w4(c)
    if len(c.errors) > 0:
        return c
    # Try to find a runtime folder with 'yk__lib.h'
    find_runtime_path(c)
    if len(c.errors) > 0:
        return c
    # Try to find a libs folder with 'libs.yaka'
    find_libs_path(c)
    if len(c.errors) > 0:
        return c
    # Load project section of file
    c.project = load_project(conf, c)
    if len(c.errors) > 0:
        return c
    if not path.exists(c.project.main):
        arrput(c.errors, "Project main file not found")
        return c
    c.c_code = inject_c_code_defaults(load_c_code(conf, c), c)
    if len(c.errors) > 0:
        return c
    return c

def create_adhoc_config(name: str, file_path: str, use_raylib: bool, use_web: bool, wasm4: bool, web_shell: str, web_assets: str, crdll: bool, no_parallel: bool) -> Config:
    # Create an adhoc configuration for single file execution mode
    c: Config = Config()
    c.compilation = Compilation()
    c.compilation.targets = array("str", "native")
    c.compilation.raylib = use_raylib
    c.compilation.raylib_hot_reloading_dll = crdll
    c.compilation.web = use_web
    c.compilation.web_shell = web_shell
    c.compilation.web_assets = web_assets
    c.compilation.wasm4 = wasm4
    c.compilation.disable_parallel_build = no_parallel
    # Try and find yakshac.exe
    find_yaksha_compiler(c)
    if len(c.errors) > 0:
        return c
    # Try and find zig.exe
    find_zig_compiler(c)
    if len(c.errors) > 0:
        return c
    # Try to find emsdk
    find_emsdk(c)
    if len(c.errors) > 0:
        return c
    # Try to find w4
    find_w4(c)
    if len(c.errors) > 0:
        return c
    # Try to find a runtime folder with 'yk__lib.h'
    find_runtime_path(c)
    if len(c.errors) > 0:
        return c
    # Try to find a libs folder with 'libs.yaka'
    find_libs_path(c)
    if len(c.errors) > 0:
        return c
    c.project = Project()
    c.project.main = file_path
    c.project.author = "unknown"
    c.project.name = name
    c.c_code = inject_c_code_defaults(CCode(), c)
    if len(c.errors) > 0:
        return c
    return c

def del_config(c: Config) -> None:
    # Delete a Config object
    if c.c_code != None:
        sarr.del_str_array(c.c_code.include_paths)
        sarr.del_str_array(c.c_code.defines)
        sarr.del_str_array(c.c_code.compiler_defines)
        sarr.del_str_array(c.c_code.includes)
        sarr.del_str_array(c.c_code.system_includes)
        sarr.del_str_array(c.c_code.c_code)
        sarr.del_str_array(c.c_code.cpp_code)
        sarr.del_str_array(c.c_code.runtime_feature_defines)
        sarr.del_str_array(c.c_code.runtime_feature_includes)
        sarr.del_str_array(c.c_code.runtime_feature_c_code)
        sarr.del_str_array(c.c_code.runtime_feature_compiler_defines)

    sarr.del_str_array(c.errors)

    if c.compilation != None:
        sarr.del_str_array(c.compilation.targets)
        del c.compilation.libc
        del c.compilation.compiler
        del c.compilation.web_shell
        del c.compilation.web_assets

    if c.project != None:
        del c.project.main
        del c.project.name
        del c.project.author

    del c.c_code
    del c.project
    del c.compilation
    del c.runtime_path
    del c.compiler_path
    del c.libs_path
    del c.zig_compiler_path
    del c.emcc_compiler_path
    del c.gcc_compiler_path
    del c.clang_compiler_path
    del c.emrun_path
    del c.w4_path
    del c
