# ==============================================================================================
# ╦  ┬┌─┐┌─┐┌┐┌┌─┐┌─┐    Yaksha Programming Language
# ║  ││  ├┤ │││└─┐├┤     is Licensed with GPLv3 + exta terms. Please see below.
# ╩═╝┴└─┘└─┘┘└┘└─┘└─┘
# Note: libs - MIT license, runtime/3rd - various
# ==============================================================================================
# GPLv3:
# 
# Yaksha - Programming Language.
# Copyright (C) 2020 - 2023 Bhathiya Perera
# 
# This program is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with this program.
# If not, see https://www.gnu.org/licenses/.
# 
# ==============================================================================================
# Additional Terms:
# 
# Please note that any commercial use of the programming language's compiler source code
# (everything except compiler/runtime, compiler/libs and compiler/3rd) require a written agreement
# with author of the language (Bhathiya Perera).
# 
# If you are using it for an open source project, please give credits.
# Your own project must use GPLv3 license with these additional terms.
# 
# You may use programs written in Yaksha/YakshaLisp for any legal purpose
# (commercial, open-source, closed-source, etc) as long as it agrees
# to the licenses of linked runtime libraries (see compiler/runtime/README.md).
# 
# ==============================================================================================
import libs.console
import libs.io
import libs.os.path
import libs.os
import libs.strings
import libs.strings.buffer as sbuf
import libs.strings.array as sarr
import libs.thread.pool
import libs.os.cpu
import raylib_support as rs
import configuration as carp

class BObject:
    args: Array[str]
    c_file: str
    object_file_path: str
    always_build: bool
    print_info: bool
    # For this object we only keep a reference to str array, everything else can be deleted (except bool)

def prepare_code(c: carp.Config, code: str) -> str:
    # Prepare code for compilation based on configuration
    # Injects includes, defines, etc
    # Then return final code
    buf: sbuf.StringBuffer = sbuf.new()
    defer sbuf.del_buf(buf)
    # --
    length: int = 0
    x: int = 0
    # write #runtime_defines
    length = len(c.c_code.runtime_feature_defines)
    x = 0
    while x < length:
        sbuf.append(buf, "#define " + c.c_code.runtime_feature_defines[x] + "\n")
        x = x + 1
    # write #defines
    length = len(c.c_code.defines)
    x = 0
    while x < length:
        sbuf.append(buf, "#define " + c.c_code.defines[x] + "\n")
        x = x + 1
    # write #include <>
    length = len(c.c_code.system_includes)
    x = 0
    while x < length:
        sbuf.append(buf, "#include <" + c.c_code.system_includes[x] + ">\n")
        x = x + 1
    # Add raylib.h & friends
    if c.compilation.raylib:
        sbuf.append(buf, "#include \"raylib.h\"\n")
        sbuf.append(buf, "#include \"raygui.h\"\n")
        sbuf.append(buf, "#include \"raymath.h\"\n")
        sbuf.append(buf, "#include \"rlgl.h\"\n")
        sbuf.append(buf, "#include \"rayextras.h\"\n")
    # write runtime feature #include ""
    length = len(c.c_code.runtime_feature_includes)
    x = 0
    while x < length:
        sbuf.append(buf, "#include \"" + c.c_code.runtime_feature_includes[x] + "\"\n")
        x = x + 1
    # write #include ""
    length = len(c.c_code.includes)
    x = 0
    while x < length:
        sbuf.append(buf, "#include \"" + c.c_code.includes[x] + "\"\n")
        x = x + 1
    # code itself
    sbuf.append(buf, code)
    sbuf.append(buf, "\n")
    # to string
    result: str = sbuf.to_str(buf)
    return result

def is_target_macos(target_to_check: str) -> bool:
    # Check if given target is macos, if target == native, check if we are running macos
    native: bool = len(target_to_check) == 0
    if native:
        return os.is_macos()
    return strings.contains(target_to_check, "macos")

def is_target_windows(target_to_check: str) -> bool:
    # Check if given target is windows, if target == native, check if we are running windows
    native: bool = len(target_to_check) == 0
    if native:
        return os.is_windows()
    return strings.contains(target_to_check, "windows")

def produce_obj_function(arg: AnyPtr) -> None:
    # Produce a single object from given build_object
    data: BObject = cast("BObject", arg)
    my_args: Array[str] = sarr.dup(data.args)
    # Copy the arguments so we can add -c and -o of our own
    defer sarr.del_str_array(my_args)

    object_file: str = path.remove_extension(path.basename(data.c_file))

    if data.print_info:
        console.cyan("runtime::")
        console.yellow(object_file)
        console.cyan(" := ")

    if not data.always_build and path.readable(data.object_file_path):
        if data.print_info:
            console.green("ok.\n")
        return

    arrput(my_args, "-c")
    arrput(my_args, data.c_file)
    arrput(my_args, "-o")
    arrput(my_args, data.object_file_path)

    pr: os.ProcessResult = os.run(my_args)

    if data.print_info:
        if pr.ok:
            console.green("ok.\n")
        else:
            console.red("failed.\n")
            console.cyan("--c compiler output---\n")
            console.red("command := ")
            console.cyan(sarr.join(my_args, " ") + "\n")
            console.red(pr.output)
            console.cyan("--end c compiler output---\n")

    os.del_process_result(pr)

def core_object(args: Array[str], c_file: str, build_path: str, target: str, always_build: bool, bobj_array: Ptr[Array[BObject]]) -> str:
    # Create a new core object and add it to given array
    suffix: str = "-"
    # native
    native: bool = len(target) == 0
    if native:
        suffix += "native"
    else:
        suffix += target
    object_file: str = path.remove_extension(path.basename(c_file))
    object_file += suffix
    object_file += ".o"
    object_file_path: str = path.join(build_path, object_file)

    bobj: BObject = BObject()
    bobj.args = args
    bobj.c_file = c_file
    bobj.always_build = always_build
    bobj.object_file_path = object_file_path
    bobj.print_info = False
    arrput(unref(bobj_array), bobj)

    return object_file_path

def build_objects_sequential(buildables: Array[BObject]) -> None:
    object_count: int = len(buildables)
    pos: int = 0
    while pos < object_count:
        buildable: BObject = buildables[pos]
        buildable.print_info = True
        produce_obj_function(cast("AnyPtr", buildable))
        pos += 1

def build_objects(buildables: Array[BObject]) -> None:
    object_count: int = len(buildables)
    cpu_data: cpu.Cpu = cpu.info()
    threads: u8 = cast("u8", cpu_data.n_processors)
    threads = iif(threads > pool.MAX_THREAD_SIZE, pool.MAX_THREAD_SIZE, threads)
    tpool: pool.ThreadPool = pool.create(threads, cast("u32", object_count + 2))
    if tpool == None:
        build_objects_sequential(buildables)
        return
    pos: int = 0
    while pos < object_count:
        buildable: BObject = buildables[pos]
        # TODO check if we added it properly
        pool.add(tpool, produce_obj_function, cast("AnyPtr", buildable))
        pos += 1
    # TODO check destroy
    pool.destroy(tpool, True)
    # Above wait for all the tasks to be done

def cleanup_buildables(buildables: Array[BObject]) -> None:
    object_count: int = len(buildables)
    pos: int = 0
    while pos < object_count:
        buildable: BObject = buildables[pos]
        del buildable.c_file
        del buildable.object_file_path
        del buildable
        pos += 1
    del buildables

def keep_ray_objects(element: str, negate: bool) -> bool:
    obj: bool = strings.endswith(element, ".o")
    if negate:
        return not obj
    return obj

def create_args(c: carp.Config, code_path: str, build_path: str, target: str, raylib_args: Array[str]) -> Array[str]:
    # Create arguments for compilation on to a string array
    # This string array need to be deleted
    native: bool = len(target) == 0
    args: Array[str]
    objects: Array[str]
    buildable_objects: Array[BObject]
    ray_objects: Array[str] = filter(raylib_args, keep_ray_objects, False)
    ray_other_args: Array[str] = filter(raylib_args, keep_ray_objects, True)
    defer sarr.del_str_array(ray_objects)
    defer sarr.del_str_array(ray_other_args)
    if c.compilation.wasm4:
        args = array("str", c.zig_compiler_path, "cc", "-std=c99", "-Wno-newline-eof", "-Wno-parentheses-equality", "-MMD", "-MP", "-Oz")
    elif c.compilation.web:
        args = array("str", c.emcc_compiler_path, "-std=c99", "-Oz", "-Wno-newline-eof", "-Wno-parentheses-equality")
    elif c.compilation.raylib_hot_reloading_dll:
        # Reduce the compilation level if we are doing hot reloading
        args = array("str", c.zig_compiler_path, "cc", "-std=c99", "-O1", "-pedantic", "-Wall", "-Wno-newline-eof", "-fPIC", "-Wno-parentheses-equality")
    else:
        args = array("str", c.zig_compiler_path, "cc", "-std=c99", "-Oz", "-pedantic", "-Wall", "-Wno-newline-eof", "-fPIC", "-Wno-parentheses-equality")
    # If not macos do link time optimization
    # If we are hot reloading, do not waste time with actually doing link time optimization and wasting time
    if not is_target_macos(target) and not c.compilation.raylib_hot_reloading_dll:
        arrput(args, "-flto=full")
    if c.compilation.raylib_hot_reloading_dll:
        arrput(args, "-DYK__CR_DLL")
    args = sarr.extend(args, ray_other_args)
    # --
    length: int = 0
    x: int = 0
    # include paths
    length = len(c.c_code.include_paths)
    x = 0
    while x < length:
        include: str = "-I" + c.c_code.include_paths[x]
        arrput(args, include)
        x = x + 1
    # runtime feature compiler defines
    length = len(c.c_code.runtime_feature_compiler_defines)
    x = 0
    while x < length:
        cdefine: str = "-D" + c.c_code.runtime_feature_compiler_defines[x]
        arrput(args, cdefine)
        x = x + 1
    # compiler defines
    length = len(c.c_code.compiler_defines)
    x = 0
    while x < length:
        cdefine: str = "-D" + c.c_code.compiler_defines[x]
        arrput(args, cdefine)
        x = x + 1
    # add target architecture
    if not native and target != "web" and target != "wasm4":
        arrput(args, "-target")
        arrput(args, target)
    if target == "wasm4":
        arrput(args, "-target")
        arrput(args, "wasm32-wasi-musl")
    # runtime c codes
    length = len(c.c_code.runtime_feature_c_code)
    x = 0
    while x < length:
        rfc: str = c.c_code.runtime_feature_c_code[x]
        rfc = core_object(args, rfc, build_path, target, False, getref(buildable_objects))
        arrput(objects, rfc)
        x = x + 1
    # c codes
    length = len(c.c_code.c_code)
    x = 0
    while x < length:
        cc: str = c.c_code.c_code[x]
        cc = core_object(args, cc, build_path, target, True, getref(buildable_objects))
        arrput(objects, cc)
        x = x + 1
    # program code -> this is the yakshac compiled full code
    program_object: str = core_object(args, code_path, build_path, target, True, getref(buildable_objects))
    arrput(objects, program_object)
    # yk__main.c -> this has the real main() method
    the_yk_main: str = path.join(c.runtime_path, "yk__main.c")
    the_yk_main = core_object(args, the_yk_main, build_path, target, False, getref(buildable_objects))
    arrput(objects, the_yk_main)
    # Build the list of buildable_objects
    if c.compilation.disable_parallel_build:
        build_objects_sequential(buildable_objects)
    else:
        build_objects(buildable_objects)
    # Clean up excess data
    cleanup_buildables(buildable_objects)
    # add objects to the args to link it
    if c.compilation.wasm4:
        # Change args for link time for wasm4
        sarr.del_str_array(args)
        args = array("str", c.zig_compiler_path, "build-lib", "-dynamic", "-flto", "-mexec-model=reactor", "-O", "ReleaseSmall", "-target", "wasm32-wasi-musl", "--strip", "--stack", "50784", "--global-base=6560", "--import-memory", "--initial-memory=65536", "--max-memory=65536", "-ofmt=wasm", "--export=start", "--export=update")
    args = sarr.extend(args, objects)
    args = sarr.extend(args, ray_objects)
    sarr.del_str_array(objects)
    # Add shell file
    if c.compilation.web and len(c.compilation.web_shell) > 0:
        arrput(args, "--shell-file")
        arrput(args, c.compilation.web_shell)
    # Add web assets dir
    if c.compilation.web and len(c.compilation.web_assets) > 0:
        arrput(args, "--preload-file")
        arrput(args, c.compilation.web_assets)
    # -shared
    if c.compilation.raylib_hot_reloading_dll:
        arrput(args, "-shared")
    # -o bin.exe
    if target != "wasm4":
        arrput(args, "-o")
    binary: str = c.project.name
    if not native and target != "web" and target != "wasm4":
        binary = binary + "-" + target
    if c.compilation.raylib_hot_reloading_dll:
        if is_target_windows(target):
            binary = binary + ".dll"
        elif is_target_macos(target):
            binary = "lib" + binary + ".dylib"
        else:
            binary = "lib" + binary + ".so"
    else:
        if is_target_windows(target):
            binary = binary + ".exe"
    if target == "web":
        binary = binary + ".html"
    if target == "wasm4":
        binary = binary + ".wasm"
    binary = path.join(build_path, binary)
    # For wasm4 -o command does not work use -femit-bin=
    if target == "wasm4":
        arrput(args, "-femit-bin=" + binary)
    else:
        arrput(args, binary)
    # ----
    return args

def print_target_eq(target: str, native: bool) -> None:
    if native:
        console.yellow("native")
    else:
        console.yellow(target)
    console.cyan(" := ")

def build_target(c: carp.Config, code_path: str, build_path: str, target: str, raylib_args: Array[str], silent: bool) -> int:
    # Build a single target (platform)
    # if target is empty it is considered to be native (current platform)
    # zero is returned if successful
    native: bool = len(target) == 0
    a: Array[str] = create_args(c, code_path, build_path, target, raylib_args)
    defer sarr.del_str_array(a)
    result: os.ProcessResult = os.run(a)
    defer os.del_process_result(result)
    if result.ok:
        if not silent:
            print_target_eq(target, native)
            console.green("done.\n")
        return 0
    else:
        print_target_eq(target, native)
        console.red("failed.\n")
        console.cyan("-------\n")
        console.red("command := ")
        console.yellow(sarr.join(a, " "))
        console.cyan("\n-------\n")
        console.red(result.output)
        return 1

def print_error(error: str, ignored: int) -> bool:
    console.red("error")
    console.yellow(":")
    println(error)
    return True

def build(c: carp.Config, code: str) -> int:
    # Cross build all compilation targets
    # zero is returned if all are successful
    carp.load_runtime_features(c, code, False)
    if c.compilation.wasm4 and (c.compilation.web or c.compilation.raylib):
        arrput(c.errors, "WASM4 builds are not compatible with raylib/web builds")

    # Default native target
    target: str = ""
    if len(c.errors) > 0:
        foreach(c.errors, print_error, 0)
        return -1

    if c.compilation.wasm4:
        target = "wasm4"
    if c.compilation.web:
        target = "web"

    target_count: int = len(c.compilation.targets)
    raylib_args: Array[str]
    defer sarr.del_str_array(raylib_args)

    if target_count != 0 and c.compilation.raylib:
        console.red("raylib build only support native builds.\n")
        console.cyan("Hint: You need to keep [compilation].targets empty\n")
        return -1

    if target_count != 0 and c.compilation.raylib:
        console.red("wasm4 build does not support additional targets.\n")
        console.cyan("Hint: You need to keep [compilation].targets empty\n")
        return -1

    build_path: str = path.join(os.cwd(), "build")
    if c.compilation.raylib:
        raylib_args = rs.get_raylib_args(c, build_path)

    print("\nbuilding ")
    print(target_count + 1)
    println(" target(s) ...")
    path.mkdir(build_path)
    code_path: str = path.join(build_path, "program_code.c")
    if not io.writefile(code_path, prepare_code(c, code)):
        console.red("Failed to write file:")
        println(code_path)
        return -1

    failed_count: int = 0

    # Build current system native binary
    failed_count = failed_count + build_target(c, code_path, build_path, target, raylib_args, False)

    # Building other targets
    cnt: int = 0
    while cnt < len(c.compilation.targets):
        target = c.compilation.targets[cnt]
        failed_count = failed_count + build_target(c, code_path, build_path, target, raylib_args, False)
        cnt = cnt + 1

    print("\n")
    if failed_count > 0:
        return -1
    return 0

def build_simple(c: carp.Config, code: str, silent: bool) -> int:
    # Native build only
    carp.load_runtime_features(c, code, silent)
    if c.compilation.wasm4 and (c.compilation.web or c.compilation.raylib):
        arrput(c.errors, "WASM4 builds are not compatible with raylib/web builds")
    if len(c.errors) > 0:
        foreach(c.errors, print_error, 0)
        return -1
    code_path: str = path.join(os.cwd(), c.project.name + ".c")
    raylib_args: Array[str]
    defer sarr.del_str_array(raylib_args)
    target: str = ""
    if c.compilation.raylib:
        raylib_args = rs.get_raylib_args(c, os.cwd())
    if c.compilation.wasm4:
        target = "wasm4"
    if c.compilation.web:
        target = "web"

    if not io.writefile(code_path, prepare_code(c, code)):
        console.red("Failed to write file:")
        println(code_path)
        return -1

    failed_count: int = build_target(c, code_path, os.cwd(), target, raylib_args, silent)

    if failed_count > 0:
        return -1

    return 0
