runtimefeature "console"

macros! {
    (defun print_literal (elem)
        (do (yk_assert_token elem YK_TOKEN_STRING)
        (list (yk_create_token YK_TOKEN_NAME "inlinec")
            (ykt_paren_open)
            (ykt_string "None") (ykt_comma)
            (ykt_string (+ "yk__printstr(" (repr elem::value) ")")) (ykt_paren_close))))
    (defun println_literal (elem)
        (do (yk_assert_token elem YK_TOKEN_STRING)
        (list (yk_create_token YK_TOKEN_NAME "inlinec")
            (ykt_paren_open)
            (ykt_string "None") (ykt_comma)
            (ykt_string (+ "yk__printlnstr(" (repr elem::value) ")")) (ykt_paren_close))))
    (yk_register {dsl print_literal print_literal})
    # print_literal!{"x"} --> print a string literal without creating a str object
    (yk_register {dsl println_literal println_literal})
    # println_literal!{"x"} --> print a string (with newline) without creating a str object
}

REWIND: Const[int] = 0
# Use rewind with set_color to stop applying any color
RED: Const[int] = 1
# Apply red foreground color
GREEN: Const[int] = 2
# Apply green foreground color
WHITE: Const[int] = 3
# Apply white foreground color
BLUE: Const[int] = 4
# Apply blue foreground color
PURPLE: Const[int] = 5
# Apply purple foreground color
YELLOW: Const[int] = 6
# Apply yellow foreground color
CYAN: Const[int] = 7
# Apply cyan foreground color


@native
def set_color(c: int) -> None:
    # Set given color
    ccode """if (nn__c == 0) { // rewind
        yk__set_colour(YK__CONSOLE_REWIND);
    } else if (nn__c == 1) { // red 
        yk__set_colour(YK__CONSOLE_RED);
    } else if (nn__c == 2) { // green 
        yk__set_colour(YK__CONSOLE_GREEN);
    } else if (nn__c == 3) { // white 
        yk__set_colour(YK__CONSOLE_WHITE);
    } else if (nn__c == 4) { // blue 
        yk__set_colour(YK__CONSOLE_BLUE);
    } else if (nn__c == 5) { // purple 
        yk__set_colour(YK__CONSOLE_PURPLE);
    } else if (nn__c == 6) { // yellow 
        yk__set_colour(YK__CONSOLE_YELLOW);
    } else if (nn__c == 7) { // cyan  
        yk__set_colour(YK__CONSOLE_CYAN);
    }"""

@native
def getch() -> int:
    # Get a single character / key press
    #   Can be used as a pause
    ccode """return yk__getch()"""

@nativedefine("yk__clear")
def clear() -> None:
    # Clear console
    pass

def color_print(color: int, x: str) -> None:
    # Print in given color and then rewind
    set_color(color)
    print(x)
    set_color(0)

def red(x: str) -> None:
    # Print text in console, in red color
    color_print(1, x)

def green(x: str) -> None:
    # Print text in console, in green color
    color_print(2, x)

def white(x: str) -> None:
    # Print text in console, in white color
    color_print(3, x)

def blue(x: str) -> None:
    # Print text in console, in blue color
    color_print(4, x)

def purple(x: str) -> None:
    # Print text in console, in purple color
    color_print(5, x)

def yellow(x: str) -> None:
    # Print text in console, in yellow color
    color_print(6, x)

def cyan(x: str) -> None:
    # Print text in console, in cyan color
    color_print(7, x)
